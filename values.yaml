back_one:
  metadata:
    name: sample-nodejs
    namespace: testing


  service:
    name: nodejs-service
    type: ClusterIP
    port: 8080
    targetPort: 8080
    protocol: TCP

  configmapData:
    HOST_DB: mongo
    PORT_DB: 27017
    NAME_DB: elyadata
    PORT: 8080


  image:
      repository: marwenguesmii/nodejsapp
      tag: "latest"
      pullPolicy: Always

  spec:
    replicasCout: 2
    restartPolicy: OnFailure
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    containers:
      resources:
        limits:
          memory: "128Mi"
          cpu: "50m"
      readinessProbe:
        httpGet:
          path: /healthzRead
          port: 8080
        initialDelaySeconds: 15
        periodSeconds: 30
      livenessProbe:
        httpGet:
          path: /healthzLive
          port: 8080
        initialDelaySeconds: 15
        periodSeconds: 30




  ingress:
    enabled: true
    name: nodejs-ingress
    className: ""
    annotations: {}
    tls:
    - hosts:
      - backone.seekmake.com 
      secretName: backone-cer
    rules:
      - host: backone.seekmake.com
        http:
          paths:
            - pathType: Prefix
              path: /
              backend:
                service:
                  name: nodejs-service
                  port:
                    number: 8080

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 30

back_two:
  metadata:
    name: sample-nodejs-v2
    namespace: testing

  service:
    name: nodejs-service-v2
    type: ClusterIP
    port: 8080
    targetPort: 8080
    protocol: TCP

  configmapData:
    HOST_DB: mongo
    PORT_DB: 27017
    NAME_DB: elyadata
    PORT: 8080


  image:
      repository: marwenguesmii/nodejsapp-2
      tag: "latest"
      pullPolicy: Always

  spec:
    replicasCout: 2
    restartPolicy: OnFailure
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    containers:
      resources:
        limits:
          memory: "128Mi"
          cpu: "50m"
      readinessProbe:
        httpGet:
          path: /healthzRead
          port: 8080
        initialDelaySeconds: 15
        periodSeconds: 30
      livenessProbe:
        httpGet:
          path: /healthzLive
          port: 8080
        initialDelaySeconds: 15
        periodSeconds: 30

  ingress:
    enabled: true
    name: nodejs-ingress-v2
    className: ""
    annotations: {}
    tls:
    - hosts:
      - back.seekmake.com 
      secretName: backtwo-cer
    rules:
      - host: back.seekmake.com
        http:
          paths:
            - pathType: Prefix
              path: /
              backend:
                service:
                  name: nodejs-service-v2
                  port:
                    number: 8080

  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 30


front:
  metadata:
    name: sample-angular
    namespace: testing

  service:
    name: angular-service
    type: ClusterIP
    port: 80
    targetPort: 80
    protocol: TCP

  configmapData:
    API_URL: https://backone.seekmake.com/api/tutorials
    API_URL_1: https://back.seekmake.com/api/tutorials
  image:
      repository: marwenguesmii/angular_nginx
      tag: "latest"
      pullPolicy: Always

  spec:
    replicasCout: 1
    restartPolicy: OnFailure
    containers:
      resources:
        limits:
          memory: "128Mi"
          cpu: "200m"
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0

  ingress:
    enabled: true
    name: angular-ingress
    className: ""
    annotations: {}
    tls:
    - hosts:
      - test.seekmake.com 
      secretName: front-cer
    rules:
      - host: test.seekmake.com
        http:
          paths:
            - pathType: Prefix
              path: /
              backend:
                service:
                  name: angular-service
                  port:
                    number: 80
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80


mongo:
  metadata:
    name: mongo-deployment
    namespace: testing
  
  service:
    name: mongo
    port: 27017
    targetPort: 27017
    clusterIP: None

  image:
    repository: mongo
    tag: "5.0"
    pullPolicy: Always

  volume:
    mountPath: /data/db
    name: pv-storage
    ClaimName: mongo-claim




